connecting java application with mysql using maven project

create new maven project in spring tool > next > catelog - internal > 
select maven quick start(for simple application)/maven web app (for large applications)
> next > group id, artifact id, project name> finish .

Now add mysql dependency to the newly created maven project

go to maven repositories website > search mysql > choose required version(2nd one) > at bottom click maven and copy the dependency > paste it in new created maven pom.xml file.

Now update the maven project

right click on project > choose maven > update project.


//connecting mysql with java application by java project

create new java project
Download jar file(mysql) from maven repositories
configure the build path of newly created project and attach the jar file to it and finish.

//Add jsp wizard to spring tool

click help  > install new softwares > work with - all available sites > type jsp > select all > finish.(accept all terms and conditions)


//Adding redhat related files
eclipse marketplace > jboss install


//creating connection btw backend and frontend

<plugins>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-war-plugin</artifactId>
			<version>3.3.1</version>
		</plugin>
		</plugins>


<%@include file="filename.jsp"%>  --used for packages importing(to insert a file)
<% %>  --used for writing code
<%= %>  --used to get the data


jdbc and MySQL --backend and database
jsp(Html) and servlet --front to backend
jsp + servlet + jdbc + MySQL
//eclipse + tomcat (apache)
MySQL jar, servlet jar, jsp

create maven project > add jsp dependency from maven repo > add plugin > update project >
delete index.jsp 
--to get missing files
configure build path >double click jre system library > alternate jre > finish

---creating project
src/main/java > right click on it > new > other > package > models, services, dbconnecton, servlets > write class in it.

>Generating getter and setters

go to source > generate getters and setters > select all > click public > finish

>tomcat installation

tomcat download
version10
core - 32-bit/64-bit windows service installer
click all next and install.
then download first zip from core.
add tomcat dependency to pom.xml

window>show view > other(search icon below top right corner then search servers) > servers > first one > noserver in terminal click on it > Apache > tomcat 9.1 server > browse > downloads > got until bin > select folder > next > click project > add > finish. right click on it and allow.

Rest API

Install Lombok > 1.18.32 > specify location > sts-4.2.1 release > open > springtoolsuite4 select > install/update > close.

Install postman > windows64bit

New project > spring starter project > dependencies(Lombok, MySQL driver, spring data jpa, spring web,validation) > finish

--to connect backend to database
src/main/resources > application properties > right click on it > openwith > generic editor spring properties.

spring.application.name=apiapplication
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/student
spring.datasource.username=root
spring.datasource.password=Karthikb@11
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

@ -> annotations

layers in backend
models - services - dao - repository - controller

dependencies required in backend

MySQL, jpa(built in crud operations), validation(hibernate - existing queries), lombok(annotations,getters,setters), springweb(for project), security(for overiding operations).

update - > RequestBody
select - > PathVariable

postman
body -> raw -> json


Hibernate

help -> eclipse marketplace -> jboss -> install -> select all -> 

src/main/resources -> ctrl+n -> hibernate -> give configurations -> create
add dependencies -> hibernate, hibernate core relocation, MySQL


security project -------------------

create spring starter project > add dependency (spring security) > enter http://localhost:8080/login
enter user name as user and password that comes after running application.properties .


-----------------------------------------------------------------------------------------------
Maven project creation

create maven project > src/main/resources should be shown to create project in that but by default it is not shown, to display that > right click on project> build path> libraries > double click on jre system libraries> alternate jre > select jre


To create our project as jar file do this process
To clean the target file
right click on project> run as> maven clean
right click on project> run as> maven build> clean package install (in goals)
right click on project> run as> maven build> package
right click on project> run as> maven install
----------------------------------------------------------------------------------------------

Converting java project to maven project

create a java project > add jar files in build path > create a db connection

-----------------------------------------------------------------------------


Hibernate to MySQL connection

create a maven QuickStart project > right click on project > build path > configure new build path> jre system libraries)double click on it)> alternative jre> finish> apply and close

Now update the project> right click on project > maven > update  > force to update

Now add dependencies of hibernate and MySQL in pom.xml an update the project

@Entity for table creation
@Table(name=) =modify table name 
@ID - to columns it gives position
@GeneratedValue(Strategy= GeneratedType.Auto
@coulmn(name=)=To change column name
@size(min=, max=) = to provides different characters in password
@pattern(regexp=) = for provide validations in passwords
@email = To providing email
@oneToMany = one to many relation
@manyToOne = many to one relation
@NotNull
@NotEmpty

Hibernate webapp------------------------------------------------------------------------

create a maven project and webapp project, build path to get src/main/java

Now add hibernate (core, orm, validator) , jsp, servlet, MySQL dependencies, and update the project

Now write models package import getter, setters, constructors fields and superclass

now create controller package, add these five line
	
		StandardServiceRegistry ssr = new StandardServiceRegistryBuilder().configure().build();
		Metadata md = new MetadataSources(ssr).getMetadataBuilder().build();
		SessionFactory sf = md.buildSessionFactory();
		Session s = sf.openSession();
		Transaction t = s.beginTransaction();
		t.commit();

now click on help > eclipse marketplace > install jboss > select all > Finish (after the popup> http checkbox> click on trust select).

for database connection > right click on src/main/resources > enter hibernate > select hibernate.config.xml > now enter database dialect (MYSQL) > driver class (com.mysql.cj.jdbc.driver) > enter (root)username and password

Now click on source > write mappings

-------------- crud operations in controller
save for adding single user (posting of data)
saveall for multiple users	(post)
fetch - getby for single user (findByID) for multiple users ( findAllByID), findAll - for fetching complete data
delete - deleteByID , deleteAllByID , deleteAll
update - for update
count

models layer for tabel creation, controller layer for crud operations, database connection using hibernate.cnf.xml
connect hibernate.cnf.xml with models and then models with controller.

------------------------------------------------------------

To develop spring starter project in eclipse

open start.spring.io > select project maven >  add dependencies (Lombok, MySQL driver, spring data jpa, spring web,validation, spring boot dev tool) > generate > next extract the zip file > Now open eclipse > open project from file system > click directory > select folder > finish.
run applications properties
create packages in com.example.demo


----------------------------------------------------------

To connect hibernate jpa and MySQL

to do it in sts -> click help  >Install new software > top dropdown > click all available sites > web xml java ee > finish
 click on src/main/resources> click new folder > (META-INF) > click new xml file > 


----------To send project from eclipse to GitHub ----------------

right click on project in eclipse -> properties -> location -> show in system explorer -> right click open gitbash here -> 
